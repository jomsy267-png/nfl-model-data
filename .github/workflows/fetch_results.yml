name: Fetch NFL Schedules (scores + closing lines)

on:
  schedule:
    - cron: "15 16 * * *"   # 10:15 AM Edmonton (after PBP fetch)
  workflow_dispatch: {}

concurrency:
  group: fetch-results
  cancel-in-progress: true

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create targets
        shell: bash
        run: mkdir -p data/external

      - name: Try aggregated schedules first (schedules.csv/.csv.gz)
        shell: bash
        run: |
          set -euo pipefail
          BASE="https://github.com/nflverse/nflverse-data/releases/download/schedules"
          got=0
          for FN in schedules.csv.gz schedules.csv; do
            URL="$BASE/$FN"
            echo "Trying $URL"
            if curl -fL --retry 3 --retry-delay 2 -o "data/external/$FN" "$URL"; then
              echo "Saved data/external/$FN"
              echo "AGG_FILE=$FN" >> $GITHUB_ENV
              got=1
              break
            fi
          done
          echo "AGG_GOT=$got" >> $GITHUB_ENV

      - name: Split aggregated schedules into per-season files (if found)
        if: env.AGG_GOT == '1'
        shell: bash
        run: |
          set -euo pipefail
          cd data/external
          IN="$AGG_FILE"
          TMP="schedules_all.csv"
          # gunzip if needed
          if [[ "$IN" == *.gz ]]; then
            gzip -dc "$IN" > "$TMP"
          else
            cp "$IN" "$TMP"
          fi
          # Split by season to schedules_YYYY.csv.gz
          python - << 'PY'
import pandas as pd, os
df = pd.read_csv("schedules_all.csv")
if "season" not in df.columns:
    raise SystemExit("schedules_all.csv missing 'season' column")
years = sorted(int(y) for y in df["season"].dropna().unique())
for y in years:
    out = f"schedules_{y}.csv"
    df[df["season"]==y].to_csv(out, index=False)
    os.system(f"gzip -f '{out}'")
print("Wrote per-season gz files:", years)
PY
          rm -f schedules_all.csv

      - name: Try per-season schedules directly (fallback)
        if: env.AGG_GOT != '1'
        shell: bash
        run: |
          set -euo pipefail
          BASE="https://github.com/nflverse/nflverse-data/releases/download/schedules"
          any=0
          for Y in $(seq 1999 2025); do
            saved=0
            for FN in "schedules_${Y}.csv.gz" "schedules_${Y}.csv" "schedule_${Y}.csv.gz" "schedule_${Y}.csv"; do
              URL="$BASE/$FN"
              echo "Trying $URL"
              if curl -fL --retry 3 --retry-delay 2 -o "data/external/$FN" "$URL"; then
                echo "Saved data/external/$FN"
                saved=1; any=1; break
              fi
            done
            if [ $saved -eq 0 ]; then
              echo "No schedules file for $Y (skipping)"
            fi
          done
          echo "FALLBACK_ANY=$any" >> $GITHUB_ENV

      - name: Show what we downloaded
        shell: bash
        run: |
          echo "Files in data/external:"
          ls -lah data/external || true
          echo "Sample head (one season if present):"
          f=$(ls data/external/schedules_*.csv.gz 2>/dev/null | head -n 1 || true)
          if [ -n "$f" ]; then gzip -dc "$f" | head -n 5; fi

      - name: Rebase & commit if changed
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main
          git pull --rebase origin main || true
          git add -A
          if git diff --cached --quiet; then
            echo "No changes."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: refresh schedules (scores + closing lines)"
            git push || (git pull --rebase origin main && git push)
          fi
